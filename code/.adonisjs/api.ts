// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type LoginGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth_controller.ts').default['showLogin'], false>
}
type LoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth_controller.ts').default['handleLogin'], true>
}
type RegisterGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth_controller.ts').default['showRegister'], false>
}
type RegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth_controller.ts').default['handleRegister'], true>
}
type DashboardGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/dashboard_controller.ts').default['showDashboard'], false>
}
type ProfileGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profile_controller.ts').default['showProfile'], false>
}
type ProfileUpdateInfosPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profile_controller.ts').default['editProfile'], false>
}
type ProfileUpdatePasswordPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/profile.ts')['updatePasswordValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/profile_controller.ts').default['editPassword'], true>
}
type ProfileDeleteAccountDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profile_controller.ts').default['deleteAccount'], false>
}
type ProfileDeleteAvatarDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/profile_controller.ts').default['deleteAvatar'], false>
}
type SuggestQuestionGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/questions_controller.ts').default['showSuggestQuestion'], false>
}
type SuggestQuestionPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/question.ts')['questionValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/questions_controller.ts').default['handleSuggestQuestion'], true>
}
type LobbyPublicGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/lobby_controller.ts').default['showPublic'], false>
}
type LobbyCreateprivateGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/lobby_controller.ts').default['showCreatePrivate'], false>
}
type LobbyJoinprivateGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/lobby_controller.ts').default['showJoinPrivate'], false>
}
type GameStartIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/game_controller.ts').default['showStartGame'], false>
}
type GameDraftIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/game_controller.ts').default['showDraftGame'], false>
}
type GamePlayIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/game_controller.ts').default['showPlayGame'], false>
}
type GameEndIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/game_controller.ts').default['showEndGame'], false>
}
type DisconnectPlayerPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/disconnect_controller.ts').default['handlePlayerDisconnected'], false>
}
type DisconnectGamePost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/disconnect_controller.ts').default['handleGameDisconnected'], false>
}
type LogoutPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth_controller.ts').default['logout'], false>
}
type BanGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/ban_controller.ts').default['showBan'], false>
}
type AdminGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/admin_controller.ts').default['showDashboard'], false>
}
type AdminDeletequestionDelete = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/question.ts')['questionIdValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/questions_controller.ts').default['deleteQuestion'], true>
}
type AdminApprovequestionPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/question.ts')['questionIdValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/questions_controller.ts').default['approveQuestion'], true>
}
type ApiGetusersPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/api/user_api_controller.ts').default['getUsers'], false>
}
export interface ApiDefinition {
  'login': {
    '$url': {
    };
    '$get': LoginGetHead;
    '$head': LoginGetHead;
    '$post': LoginPost;
  };
  'register': {
    '$url': {
    };
    '$get': RegisterGetHead;
    '$head': RegisterGetHead;
    '$post': RegisterPost;
  };
  'dashboard': {
    '$url': {
    };
    '$get': DashboardGetHead;
    '$head': DashboardGetHead;
  };
  'profile': {
    '$url': {
    };
    '$get': ProfileGetHead;
    '$head': ProfileGetHead;
    'update': {
      'infos': {
        '$url': {
        };
        '$post': ProfileUpdateInfosPost;
      };
      'password': {
        '$url': {
        };
        '$post': ProfileUpdatePasswordPost;
      };
    };
    'delete': {
      'account': {
        '$url': {
        };
        '$delete': ProfileDeleteAccountDelete;
      };
      'avatar': {
        '$url': {
        };
        '$delete': ProfileDeleteAvatarDelete;
      };
    };
  };
  'suggest-question': {
    '$url': {
    };
    '$get': SuggestQuestionGetHead;
    '$head': SuggestQuestionGetHead;
    '$post': SuggestQuestionPost;
  };
  'lobby': {
    'public': {
      '$url': {
      };
      '$get': LobbyPublicGetHead;
      '$head': LobbyPublicGetHead;
    };
    'create-private': {
      '$url': {
      };
      '$get': LobbyCreateprivateGetHead;
      '$head': LobbyCreateprivateGetHead;
    };
    'join-private': {
      '$url': {
      };
      '$get': LobbyJoinprivateGetHead;
      '$head': LobbyJoinprivateGetHead;
    };
  };
  'game': {
    'start': {
      ':id': {
        '$url': {
        };
        '$get': GameStartIdGetHead;
        '$head': GameStartIdGetHead;
      };
    };
    'draft': {
      ':id': {
        '$url': {
        };
        '$get': GameDraftIdGetHead;
        '$head': GameDraftIdGetHead;
      };
    };
    'play': {
      ':id': {
        '$url': {
        };
        '$get': GamePlayIdGetHead;
        '$head': GamePlayIdGetHead;
      };
    };
    'end': {
      ':id': {
        '$url': {
        };
        '$get': GameEndIdGetHead;
        '$head': GameEndIdGetHead;
      };
    };
  };
  'disconnect': {
    'player': {
      '$url': {
      };
      '$post': DisconnectPlayerPost;
    };
    'game': {
      '$url': {
      };
      '$post': DisconnectGamePost;
    };
  };
  'logout': {
    '$url': {
    };
    '$post': LogoutPost;
  };
  'ban': {
    '$url': {
    };
    '$get': BanGetHead;
    '$head': BanGetHead;
  };
  'admin': {
    '$url': {
    };
    '$get': AdminGetHead;
    '$head': AdminGetHead;
    'delete-question': {
      '$url': {
      };
      '$delete': AdminDeletequestionDelete;
    };
    'approve-question': {
      '$url': {
      };
      '$post': AdminApprovequestionPost;
    };
  };
  'api': {
    'getusers': {
      '$url': {
      };
      '$post': ApiGetusersPost;
    };
  };
}
const routes = [
  {
    params: ["*"],
    name: 'drive.fs.serve',
    path: '/uploads/*',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'home.show',
    path: '/',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'rules.show',
    path: '/rules',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'auth.login.show',
    path: '/login',
    method: ["GET","HEAD"],
    types: {} as LoginGetHead,
  },
  {
    params: [],
    name: 'auth.login.post',
    path: '/login',
    method: ["POST"],
    types: {} as LoginPost,
  },
  {
    params: [],
    name: 'auth.register.show',
    path: '/register',
    method: ["GET","HEAD"],
    types: {} as RegisterGetHead,
  },
  {
    params: [],
    name: 'auth.register.post',
    path: '/register',
    method: ["POST"],
    types: {} as RegisterPost,
  },
  {
    params: [],
    name: 'dashboard.show',
    path: '/dashboard',
    method: ["GET","HEAD"],
    types: {} as DashboardGetHead,
  },
  {
    params: [],
    name: 'profile.show',
    path: '/profile',
    method: ["GET","HEAD"],
    types: {} as ProfileGetHead,
  },
  {
    params: [],
    name: 'profile.edit.infos',
    path: '/profile/update/infos',
    method: ["POST"],
    types: {} as ProfileUpdateInfosPost,
  },
  {
    params: [],
    name: 'profile.edit.password',
    path: '/profile/update/password',
    method: ["POST"],
    types: {} as ProfileUpdatePasswordPost,
  },
  {
    params: [],
    name: 'profile.delete.account',
    path: '/profile/delete/account',
    method: ["DELETE"],
    types: {} as ProfileDeleteAccountDelete,
  },
  {
    params: [],
    name: 'profile.delete.avatar',
    path: '/profile/delete/avatar',
    method: ["DELETE"],
    types: {} as ProfileDeleteAvatarDelete,
  },
  {
    params: [],
    name: 'suggestquestions.show',
    path: '/suggest-question',
    method: ["GET","HEAD"],
    types: {} as SuggestQuestionGetHead,
  },
  {
    params: [],
    name: 'suggestquestions.post',
    path: '/suggest-question',
    method: ["POST"],
    types: {} as SuggestQuestionPost,
  },
  {
    params: [],
    name: 'lobby.public.show',
    path: '/lobby/public',
    method: ["GET","HEAD"],
    types: {} as LobbyPublicGetHead,
  },
  {
    params: [],
    name: 'lobby.create-private.show',
    path: '/lobby/create-private',
    method: ["GET","HEAD"],
    types: {} as LobbyCreateprivateGetHead,
  },
  {
    params: [],
    name: 'lobby.join-private.show',
    path: '/lobby/join-private',
    method: ["GET","HEAD"],
    types: {} as LobbyJoinprivateGetHead,
  },
  {
    params: ["id"],
    name: 'game.start.show',
    path: '/game/start/:id',
    method: ["GET","HEAD"],
    types: {} as GameStartIdGetHead,
  },
  {
    params: ["id"],
    name: 'game.draft.show',
    path: '/game/draft/:id',
    method: ["GET","HEAD"],
    types: {} as GameDraftIdGetHead,
  },
  {
    params: ["id"],
    name: 'game.play.show',
    path: '/game/play/:id',
    method: ["GET","HEAD"],
    types: {} as GamePlayIdGetHead,
  },
  {
    params: ["id"],
    name: 'game.end.show',
    path: '/game/end/:id',
    method: ["GET","HEAD"],
    types: {} as GameEndIdGetHead,
  },
  {
    params: [],
    name: 'disconnect.player',
    path: '/disconnect/player',
    method: ["POST"],
    types: {} as DisconnectPlayerPost,
  },
  {
    params: [],
    name: 'disconnect.game',
    path: '/disconnect/game',
    method: ["POST"],
    types: {} as DisconnectGamePost,
  },
  {
    params: [],
    name: 'auth.logout',
    path: '/logout',
    method: ["POST"],
    types: {} as LogoutPost,
  },
  {
    params: [],
    name: 'ban.show',
    path: '/ban',
    method: ["GET","HEAD"],
    types: {} as BanGetHead,
  },
  {
    params: [],
    name: 'admin.show',
    path: '/admin',
    method: ["GET","HEAD"],
    types: {} as AdminGetHead,
  },
  {
    params: [],
    name: 'admin.question.delete',
    path: '/admin/delete-question',
    method: ["DELETE"],
    types: {} as AdminDeletequestionDelete,
  },
  {
    params: [],
    name: 'admin.question.approve',
    path: '/admin/approve-question',
    method: ["POST"],
    types: {} as AdminApprovequestionPost,
  },
  {
    params: [],
    name: 'api.getusers',
    path: '/api/getusers',
    method: ["POST"],
    types: {} as ApiGetusersPost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
declare module '@tuyau/inertia/types' {
  type InertiaApi = typeof api
  export interface Api extends InertiaApi {}
}
